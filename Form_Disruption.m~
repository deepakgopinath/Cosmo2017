clear; clc; close all;

%work at the threshold of LM Disruption. 

%First do LM_Disruption with highest amp and highest freq range with rand
%phase. Then for increasing levels of form disruption add more variability
%to one link at a time. 

%first perform LM Disruption at highest level.
load('cellLR_Unperturbed.mat');
rand_amp = 0.24;
freq_range = [11 13];
phase_scale = pi/2;

disp_ind = [1,3,2];
camera_angle = [-180, 0];
fps = 60;
num_points = 5; %number of points in the walker. 
qpoints = (0:0.05:2*pi);
num_trials = 200;
num_templates = 96;
%adj_matrix is used to look up the link connections of each dot in the
%figure. THis is need to detect the moemtary direction in which the local
%motion perturbation should take place. 
adj_matrix = [ 0 0 0 1 0;
               1 0 0 0 0;
               0 1 0 0 0;
               1 0 0 0 0;
               0 0 0 1 0
               ];
[I,J] = ind2sub(size(adj_matrix'),find(adj_matrix' == 1));
links = [J I]; %indices of connected links for each point. 
link_dirs = zeros(num_points, 3); 

cellL_LM = cell(num_trials, 1);
cellR_LM = cell(num_trials, 1);
num_frames = length(qpoints);
amp_for_trials_L = zeros(num_trials, 1); %to keep track of the amplitudes of the trials. 
template_for_trials_L = zeros(num_trials, 1); %waht template was perturbed for each trial.
amp_for_trials_R = zeros(num_trials, 1); %to keep track of the amplitudes of the trials. 
template_for_trials_R = zeros(num_trials, 1); %waht template was perturbed for each trial.
num_links_distorted = 1;
for i=1:num_trials
    rand_template = randi(num_templates);
    rand_freq = freq_range(1) + (freq_range(2) - freq_range(1))*rand;
    rand_freq_vec = rand_freq*ones(num_points, 1); 
    rand_phase = phase_scale*(2*rand(num_points, 1) - 1);
    modulator = rand_amp*sin(rand_freq_vec.*qpoints + rand_phase);
    amp_for_trials_L(i) = rand_amp;
    template_for_trials_L(i) = rand_template;
    traj = cellL{rand_template};
    for j=1:num_frames
        curr_frame = permute(traj(j,:,:), [3,2,1])';
        for k=1:num_points
            link_dirs(k, :) = curr_frame(links(k,2),:) - curr_frame(k, :);
        end
        curr_amp = modulator(:, j);
        curr_frame = curr_frame + repmat(curr_amp, 1, 3).*link_dirs;
        traj(j, :, :) = curr_frame;
    end
    
    link_distort = 5;
    mu = zeros(3,1);
    sigma = 0.2*eye(3);
    links_to_distort = randi(num_points, num_links_distorted);
    for j=1:num_links_distorted %for number of links distorted
        curr_link = links_to_distort(j);
        rand_traj_3d = mvnrnd(mu, sigma, length(qpoints)); %3d normal distributed trajectories. 
        for k=1:3 %smooth the trajectories
            rand_traj_3d(:,k) = smooth(smooth(rand_traj_3d(:,k)));
        end
        for k=1:num_frames
            new_frame_link = permute(traj(k, curr_link, :), [3,1,2])' + rand_traj_3d(k,:);
            for m=1:3
                
            end
        end
    end
    
end
